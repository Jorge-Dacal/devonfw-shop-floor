apiVersion: v1
kind: Template
message: |-
  The following service(s) have been created in your project: ${APPLICATION_NAME}.

    Database User: from secret `mattermost`
         Password: from secret `mattermost`
    Database Name: ${MYSQL_DATABASE}

  Please see https://github.com/goern/mattermost-openshift/blob/master/README.md for detailed infomation.

  Dont forget to export service ${APPLICATION_NAME} as a route!

metadata:
  name: mattermost
  annotations:
    description: |-
      MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/README.md.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    openshift.io/display-name: Mattermost
    tags: mattermost
    template.openshift.io/documentation-url: https://github.com/goern/mattermost-openshift/blob/master/README.md
    template.openshift.io/long-description: This template provides a Mattermost service, it depends on a Secret and MySQL.
    template.openshift.io/provider-display-name: Mattermost Community
    template.openshift.io/support-url: https://github.com/goern/mattermost-openshift/issues
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    tags:  
    - name: 4.1.0
      annotations:
        description: The Mattermost image from docker.io/goern/mattermost
        openshift.io/display-name: Mattermost 4.1.0
        tags: mattermost
        version: "4.1.0"
      from:
        kind: DockerImage
        name: docker.io/goern/mattermost:4.1.0
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    selector:
      name: ${APPLICATION_NAME}
    replicas: 1
    securityContext: {}
    serviceAccount: mattermost
    serviceAccountName: mattermost
    template:
      metadata:
        labels:
          name: ${APPLICATION_NAME}
      spec:
        containers:
        - image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8065
          env:
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: user
                name: mattermost-database
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mattermost-database
          - name: DB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: db_database
                name: mattermost
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8065
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mattermost
          ports:
          - containerPort: 8065
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8065
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 128Mi
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8065-tcp
      port: 8065
      protocol: TCP
      targetPort: 8065
    selector:
      deploymentconfig: ${APPLICATION_NAME}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: mattermost
  data:
    db_database: ${MYSQL_DATABASE}
    db_host: mysql.mattermost.svc
parameters:
- name: APPLICATION_NAME
  required: true
  value: mattermost
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: mattermost_test
